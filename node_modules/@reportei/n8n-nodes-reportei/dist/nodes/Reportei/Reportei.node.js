"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reportei = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const ReportDescription_1 = require("./descriptions/ReportDescription");
const DashboardDescription_1 = require("./descriptions/DashboardDescription");
const TimelineDescription_1 = require("./descriptions/TimelineDescription");
const GenericFunctions_1 = require("./GenericFunctions");
class Reportei {
    constructor() {
        this.description = {
            displayName: 'Reportei',
            name: 'reportei',
            icon: 'file:reportei.svg',
            group: ['transform'],
            version: 1,
            subtitle: '={{ $parameter["operation"] + ": " + $parameter["resource"] }}',
            description: 'Perform actions with Reportei API',
            defaults: {
                name: 'Reportei',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'reporteiApi',
                    required: true,
                },
            ],
            properties: [
                {
                    displayName: 'Resource',
                    name: 'resource',
                    type: 'options',
                    noDataExpression: true,
                    options: [
                        { name: 'Report', value: 'report' },
                        { name: 'Dashboard', value: 'dashboard' },
                        { name: 'Timeline', value: 'timeline' },
                    ],
                    default: 'report',
                    required: true,
                    description: 'Choose which resource you want to operate on',
                },
                ...ReportDescription_1.reportOperations,
                ...ReportDescription_1.reportFields,
                ...DashboardDescription_1.dashboardOperations,
                ...DashboardDescription_1.dashboardFields,
                ...TimelineDescription_1.timelineOperations,
                ...TimelineDescription_1.timelineFields,
            ],
        };
        this.methods = {
            loadOptions: {
                async getClients() {
                    const returnData = [];
                    const response = await this.helpers.httpRequestWithAuthentication.call(this, 'reporteiApi', {
                        method: 'GET',
                        url: 'https://app.reportei.com/api/v1/clients?per_page=1000',
                        json: true,
                    });
                    for (const client of response.data) {
                        returnData.push({
                            name: client.name,
                            value: client.id,
                        });
                    }
                    return returnData;
                },
                async getIntegrations() {
                    const returnData = [];
                    const clientId = this.getCurrentNodeParameter('projectId');
                    const response = await this.helpers.httpRequestWithAuthentication.call(this, 'reporteiApi', {
                        method: 'GET',
                        url: `https://app.reportei.com/api/v1/clients/${clientId}/integrations?per_page=1000`,
                        json: true,
                    });
                    for (const integration of response.data) {
                        returnData.push({
                            name: integration.full_name,
                            value: integration.id,
                        });
                    }
                    return returnData;
                },
                async getReports() {
                    const returnData = [];
                    const clientId = this.getCurrentNodeParameter('projectId');
                    const response = await this.helpers.httpRequestWithAuthentication.call(this, 'reporteiApi', {
                        method: 'GET',
                        url: `https://app.reportei.com/api/v1/clients/${clientId}/reports?per_page=1000`,
                        json: true,
                    });
                    for (const report of response.data) {
                        returnData.push({
                            name: report.title,
                            value: report.id,
                        });
                    }
                    return returnData;
                },
                async getTemplates() {
                    const returnData = [];
                    try {
                        const clientId = this.getCurrentNodeParameter('projectId');
                        const urls = [
                            'https://app.reportei.com/api/v1/templates',
                            'https://app.reportei.com/api/v1/template',
                            'https://app.reportei.com/api/v1/report-templates'
                        ];
                        if (clientId) {
                            urls.unshift(`https://app.reportei.com/api/v1/clients/${clientId}/templates`);
                        }
                        let response = null;
                        for (const url of urls) {
                            try {
                                response = await this.helpers.httpRequestWithAuthentication.call(this, 'reporteiApi', {
                                    method: 'GET',
                                    url: url,
                                    json: true,
                                });
                                break;
                            }
                            catch (urlError) {
                                continue;
                            }
                        }
                        if (!response) {
                            throw new n8n_workflow_1.NodeApiError(this.getNode(), { message: 'Unable to load templates' });
                        }
                        let templates;
                        if (response.data) {
                            templates = response.data;
                        }
                        else if (Array.isArray(response)) {
                            templates = response;
                        }
                        else if (response.templates) {
                            templates = response.templates;
                        }
                        else {
                            templates = [];
                        }
                        if (Array.isArray(templates) && templates.length > 0) {
                            for (const template of templates) {
                                returnData.push({
                                    name: template.name || template.title || template.label || `Template ${template.id}`,
                                    value: template.id || template.value,
                                });
                            }
                        }
                        else {
                            returnData.push({
                                name: 'No templates available',
                                value: '',
                            });
                        }
                    }
                    catch (error) {
                        returnData.push({
                            name: '',
                            value: '',
                        });
                    }
                    return returnData;
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        for (let i = 0; i < items.length; i++) {
            try {
                const resource = this.getNodeParameter('resource', i);
                const operation = this.getNodeParameter('operation', i);
                let responseData;
                if (resource === 'report') {
                    if (operation === 'create') {
                        const projectId = this.getNodeParameter('projectId', i);
                        const integrationsIds = this.getNodeParameter('integrationsIds', i);
                        const startDate = this.getNodeParameter('startDate', i);
                        const endDate = this.getNodeParameter('endDate', i);
                        const comparisonStartDate = this.getNodeParameter('comparisonStartDate', i);
                        const comparisonEndDate = this.getNodeParameter('comparisonEndDate', i);
                        const reportTitle = this.getNodeParameter('reportTitle', i);
                        const reportSubtitle = this.getNodeParameter('reportSubtitle', i);
                        const templateId = this.getNodeParameter('templateId', i, '');
                        const body = {
                            client_id: projectId,
                            selected_sources: integrationsIds,
                            analysis_start: startDate,
                            analysis_end: endDate,
                            comparison_start: comparisonStartDate,
                            comparison_end: comparisonEndDate,
                            title: reportTitle,
                            subtitle: reportSubtitle,
                        };
                        if (templateId) {
                            body.template_id = templateId;
                        }
                        responseData = await GenericFunctions_1.reporteiApiRequest.call(this, 'POST', '/create_report', body);
                    }
                }
                if (resource === 'dashboard') {
                    if (operation === 'create') {
                        const projectId = this.getNodeParameter('projectId', i);
                        const integrationsIds = this.getNodeParameter('integrationsIds', i);
                        const startDate = this.getNodeParameter('startDate', i);
                        const endDate = this.getNodeParameter('endDate', i);
                        const comparisonStartDate = this.getNodeParameter('comparisonStartDate', i);
                        const comparisonEndDate = this.getNodeParameter('comparisonEndDate', i);
                        const reportTitle = this.getNodeParameter('reportTitle', i);
                        const reportSubtitle = this.getNodeParameter('reportSubtitle', i);
                        const templateId = this.getNodeParameter('templateId', i, '');
                        const body = {
                            client_id: projectId,
                            selected_sources: integrationsIds,
                            analysis_start: startDate,
                            analysis_end: endDate,
                            comparison_start: comparisonStartDate,
                            comparison_end: comparisonEndDate,
                            title: reportTitle,
                            subtitle: reportSubtitle,
                        };
                        if (templateId) {
                            body.template_id = templateId;
                        }
                        responseData = await GenericFunctions_1.reporteiApiRequest.call(this, 'POST', '/create_dashboard', body);
                    }
                }
                if (resource === 'timeline') {
                    if (operation === 'create') {
                        const projectId = this.getNodeParameter('projectId', i);
                        const milestoneTitle = this.getNodeParameter('milestoneTitle', i);
                        const milestoneDetails = this.getNodeParameter('milestoneDetails', i);
                        const reportId = this.getNodeParameter('reportId', i);
                        const body = {
                            client_id: projectId,
                            title: milestoneTitle,
                            content: milestoneDetails,
                            report_id: reportId,
                        };
                        responseData = await GenericFunctions_1.reporteiApiRequest.call(this, 'POST', '/add_to_timeline', body);
                    }
                }
                if (!responseData) {
                    responseData = { message: 'No valid operation was performed' };
                }
                returnData.push({
                    json: responseData,
                });
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({
                        json: { error: error.message },
                    });
                    continue;
                }
                throw error;
            }
        }
        return [returnData];
    }
}
exports.Reportei = Reportei;
//# sourceMappingURL=Reportei.node.js.map